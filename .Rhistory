ggplot(USArrests, aes(x=Murder, y=Assault)) +
stat_voronoi(geom="path") +
geom_point() +
geom_text_repel(aes(x=Murder,
y=Assault,
label=rownames(USArrests))) +
ggtitle("Murder x Assault") +
coord_fixed()
ggplot(USArrests.df, aes(x=Murder, y=Assault)) +
stat_voronoi(geom="path") +
geom_point() +
geom_text_repel(aes(x=Murder,
y=Assault,
label=rownames(USArrests.df))) +
ggtitle("Murder x Assault") +
coord_fixed()
ggplot(nbumpus, aes(x=totlen, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
head(nbumpus[-c(10)])
head(nbumpus)
ggplot(nbumpus, aes(x=totlen, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(nbumpus[-c(10)], aes(x=totlen, y=head)) +
stat_voronoi(geom="path") +
geom_point()
nbumpus
ggplot(nbumpus[-c(10)], aes(x=totlen, y=totlen)) +
stat_voronoi(geom="path") +
geom_point()
head
ggplot(nbumpus, aes(x=totlen, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(nbumpus[-c(10)], aes(x=totlen, y=head)) +
stat_voronoi(geom="path") +
geom_point()
ggplot(nbumpus, aes(x=totlen, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="Category") +
geom_point()
ggplot(nbumpus, aes(x=totlen, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="polygon") +
geom_point()
str(nbumpus)
ggplot(nbumpus, aes(x=humer, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="polygon") +
geom_point()
str(nbumpus)
ggplot(nbumpus[-c(10)], aes(x=femur, y=head)) +
stat_voronoi(geom="path") +
geom_point()
ggplot(nbumpus, aes(x=totlen, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="polygon") +
geom_point()
str(nbumpus)
nbumpus[!duplicated(head, totlen)]
nbumpus[!duplicated(head)]
nbumpus[!duplicated(nbumpus$head),]
n1<-nbumpus[!duplicated(nbumpus$head),]
n2<-n1[!duplicated(n1$totlen)]
n1<-nbumpus[!duplicated(nbumpus$head),]
n2<-n1[!duplicated(n1$totlen)]
n1
head(n1)
n1<-nbumpus[!duplicated(nbumpus$head),]
n2<-n1[!duplicated(n1$totlen)]
n1<-nbumpus[!duplicated(nbumpus$head),]
n2<-n1[!duplicated(n1$totlen),]
ggplot(n2, aes(x=totlen, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="polygon") +
geom_point()
ggplot(n2, aes(x=totlen, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
n2
head(n2)
unique(n2$Category)
unique(n1$Category)
ggplot(n1, aes(x=totlen, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=femur, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=wgt, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=wgt, y=head, col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=wgt, y=head, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
str(nbumpus)
ggplot(n1, aes(x=tibio, y=stern, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=tibio, y=PC1, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=tibio, y=PC2, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=skull, y=head, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=skull, y=humer, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=totlen, y=head, shape=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=wgt, y=head, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=tibio, y=stern, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=skull, y=humer, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
ggplot(n1, aes(x=tibio, y=stern, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
str(bumpus)
ggplot(n1, aes(x=skull, y=head, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
n2<-n1[!duplicated(n1$skull),]
ggplot(n2, aes(x=skull, y=head, shape=as.factor(Category),  col=as.factor(Category))) +
stat_voronoi(geom="path") +
geom_point()
require(cluster)
require(ggvoronoi)
require(qgraph)
require(NetComp)
data("bumpus")
require(cluster)
require(ggvoronoi)
require(qgraph)
require(NetComp)
kc<-kmeans(z,3)
kc
kc$cluster<-as.factor(kc$cluster)
ggplot(data=bumpus, aes(y=head, x=femur, col=kc$cluster))+geom_point()
ggplot(data=bumpus, aes(y=head, x=stern, col=kc$cluster))+geom_point()
ggplot(data=bumpus, aes(y=head, x=skull, col=kc$cluster))+geom_point()
ggplot(data=bumpus, aes(y=totlen, x=skull, col=kc$cluster))+geom_point()
PCAbump<-prcomp(bumpus[,-c(1,2)], center=T, scale=T)
options(digits=4)
newdata<-cbind(bumpus, PCAbump$x[,1:2])
ggplot(newdata, aes(PC1, PC2, col=kc$cluster, fill=kc$cluster))+
stat_ellipse(geom="polygon", col = "black", alpha=0.5)+geom_point()
newdata<-cbind(bumpus, PCAbump$x[,2:3])
ggplot(newdata, aes(PC2, PC3, col=kc$cluster, fill=kc$cluster))+
stat_ellipse(geom="polygon", col = "black", alpha=0.5)+geom_point()
newdata<-cbind(bumpus, PCAbump$x[,3:4])
ggplot(newdata, aes(PC3, PC4, col=kc$cluster, fill=kc$cluster))+
stat_ellipse(geom="polygon", col = "black", alpha=0.5)+geom_point()
wss<-(nrow(z)-1)*sum(apply(z,2,var))
for(i in 1:35){
wss[i]<-sum(kmeans(z,centers=i)$withinss)
}
plot(1:35, wss, type="b", xlab="Number of Clusters", ylab="Within Group Sum of Squares")
test<-c(1,2,3,4)
max(test)
test<-c(1,2,3,4)
test2<-c(1.1,1.9,2.9,5)
max(test)
max(test,test2)
length(test)
for(i in length(test)){
print(i)
}
for(i in 1;length(test)){
print(i)
}
for(i in 1:length(test)){
print(i)
}
0.1/1.1+0.1/2+0.1/3+1/5
E=0
for(i in 1:length(test)){
num = abs(test(i)-test2(i))
den = max(test(i), test2(i))
E = E + num/den
}
test<-c(1,2,3,4)
test2<-c(1.1,1.9,2.9,5)
E=0
for(i in 1:length(test)){
num = abs(test(i)-test2(i))
den = max(test(i), test2(i))
E = E + num/den
}
tEst<-c(1,2,3,4)
E=0
for(i in 1:length(test)){
num = abs(tEst(i)-test2(i))
den = max(tEst(i), test2(i))
E = E + num/den
}
E=0
for(i in 1:length(tEst)){
num = abs(tEst(i)-test2(i))
den = max(tEst(i), test2(i))
E = E + num/den
}
tEst<-c(1,2,3,4)
E=0
for(i in 1:length(tEst)){
num = abs(tEst(i)-test2(i))
den = max(tEst(i), test2(i))
E = E + num/den
}
tEst(1)
tEst[1]
E=0
for(i in 1:length(tEst)){
num = abs(tEst[i]-test2[i])
den = max(tEst[i], test2[i])
E = E + num/den
}
E
dRu <- function(x, y) {
E=0
for(i in 1:length(x)){
num = abs(x[i]-u[i])
den = max(x[i], y[i])
E = E + num/den
}
}
set.seed(1234567890, kind="Mersenne-Twister")
x <- runif(5)
y <- runif(5)
dRu(x,y)
dRu <- function(x, y) {
E=0
for(i in 1:length(x)){
num = abs(x[i]-u[i])
den = max(x[i], y[i])
E = E + num/den
}
print(E)
}
set.seed(1234567890, kind="Mersenne-Twister")
x <- runif(5)
y <- runif(5)
dRu(x,y)
(0.3+1)/(1.1+2+3+5)
dRu <- function(x, y) {
e=0
E=0
for(i in 1:length(x)){
e = e +abs(x[i]-u[i])
E = E +max(x[i], y[i])
}
print(e/E)
}
dRu(tEst,test2)
(0.3+1)/(1.1+2+3+5)
dRu(tEst,test2)
e=0
E=0
for(i in 1:length(tEst)){
e = e+ abs(tEst[i]-test2[i])
E = E +max(tEst[i], test2[i])
}
print(e/E)
u
dRu <- function(x, y) {
e=0
E=0
for(i in 1:length(x)){
e = e +abs(x[i]-y[i])
E = E +max(x[i], y[i])
}
print(e/E)
}
dRu(tEst,test2)
dRu <- function(x, y) {
e=0
E=0
for(i in 1:length(x)){
e = e +abs(x[i]-y[i])
E = E +max(x[i], y[i])
}
print(e/E)
}
set.seed(1234567890, kind="Mersenne-Twister")
x <- runif(5)
y <- runif(5)
dRu(x,y)
source('D:/Uni/393Stat/Test2/RR.R')
Auto<-read.csv(Auto.csv)
getwd()
setwd(D:\Uni\393Stat\Test2)
setwd('D:/Uni/393Stat/Test2')
Auto<-read.csv(Auto.csv)
Auto<-read.csv('Auto.csv')
str(Auto)
X<-model.matrix(mpg~weight+year, data=Auto)
head(X,10)
summary(lm(mpg~weight+year, data=Auto))
y<-Auto$mpg
beta_hat<-solve(t(X)%*%X)%*%t(X)%*%y
beta_hat
y_hat<-X%*%beta_hat
head(y_hat,10)
(SSE<-t(y-y_hat)%*%(y-y_hat))
length(y)
(RSE<-SSE/n-3)
(SSE<-t(y-y_hat)%*%(y-y_hat))
n<-length(y)
(RSE<-SSE/n-3)
(RSE<-SSE/(n-3))
(RSE<-SSE/(n-3))^.5
(SSE<-t(y-y_hat)%*%(y-y_hat))
n<-length(y)
(RSE<-SSE/(n-3))
summary(lm(mpg~weight+year, data=Auto))
summary(lm(mpg~weight+year, data=Auto))
qnorm((1-0.99)/2, lower.tail = F)
qnorm((1-0.95)/2, lower.tail = F)
9
qnorm((1-0.99)/2, lower.tail = F)
modelq1<-(lm(mpg~weight+year, data=Auto))
summary(modelq1)$std
summary(modelq1)$names
?summary(modelq1)
unique(summary(modelq1)
)
summary(modelq1)
?summary()
confint(modelq1)
summary(modelq1)$sigma
summary(modelq1)$coef
summary(modelq1)$coef[,2]
stderror<-summary(modelq1)$coef[,2]
std<-summary(modelq1)$coef[,2]
std%*%t(std)
std
b_smm<-summary(modelq1)$coef[,1]
b_smm
beta_hat
cons<-qnorm((1-0.99)/2, lower.tail = F)
b_mm
b_smm
std
t(std)
b_smm+0*std
b_smm
(c(b_smm-cons*std, b_smm+cons*std))
(cbind(b_smm-cons*std, b_smm+cons*std))
new_cars =data.frame(weight =c(3500, 5000), year =c(76, 81))
predict(modelq1, newdata=new_data, interval="confidence")
predict(modelq1, newdata=new_cars, interval="confidence")
predict(modelq1, newdata=new_cars)
predict(modelq1, newdata=new_cars, interval="prediction")
predict(modelq1, newdata=new_cars, interval="prediction", level=0.99)
predict(modelq1, newdata=new_cars)
predict(modelq1, newdata=new_cars, interval="confidence", level=0.99)
predict(modelq1, newdata=new_cars, interval="prediction", level=0.99)
null<-(lm(mpg~1, data=Auto))
anova(null, modelq1)
str(Auto)
satm<-lm(mpg~., data=Auto)
summary(satm)
anova(modelq1, satm)
str(Auto)
Auto$X
satm2<-lm(mpg~cylinders+displacement+horsepower+weight+acceleration+year+origin+name, data=Auto)
anova(modelq1, satm2)
dflong <-read.csv("Qmixed.csv", header=TRUE)dflong
dflong <-read.csv("Qmixed.csv", header=TRUE)
dflong
str(dflong)
model2<-lme(score~time*treat, data=dflong)
library(lmperm)
library(LMperm)
library(nlme)
model2<-lme(score~time*treat, data=dflong)
model2<-lme(score~1, data=dflong)
str(dflong)
dflong$treat<-factor(dflong$treat)
str(dflong)
dflong <-read.csv("Qmixed.csv", header=TRUE)
str(dflong)
model2<-lme(score~treat+time+treat*time,random =~1|id, data=dflong)
X<-model.matrix(model2, dflong)
X
Z<-model.matrix(score~treat+time+treat*time,random =~1|id, data=dflong)
Z
Z=Z[,order(columns(Z))]
Z=Z[,order(colnames(Z))]
Z
Z<-model.matrix(score~dflong-1, data=dflong)
Z<-model.matrix(score~dflong-1, data=dflong)
X
Z<-model.matrix(score~treat+time+treat*time, data=dflong)
Z=Z[,order(colnames(Z))]
Z
try<-lme(score~1, data=dflong, list(dflong=~1))
try<-lme(score~1, data=dflong, list(dflong=~1), method="ML")
try<-lme(score~1, dflong, list(dflong=~1), method="ML")
str(dflong)
try<-lme(score~1, dflong, list(dflong=~1), method="ML")
try<-lme(score~1, dflong, method="ML")
try<-lme(score~1, dflong, list(dflong=~1), method="ML")
dflong$score<-as.numeric(dflong$score)
try<-lme(score~1, dflong, list(dflong=~1), method="ML")
dflong <-read.csv("Qmixed.csv", header=TRUE)
try<-lme(score~1, dflong, list(dflong=~1), method="ML")
Z =model.matrix(score~dflong-1, data = dflong)
Z =model.matrix(score~dflong-1, data = dflong)
Z =model.matrix(model2)
model2<-lme(score~treat+time+treat*time,random =~1|id, data=dflong)
Z =model.matrix(model2)
X
model.matrix(lme(score~treat+time+treat*time,random =~1|id, data=dflong))
model.matrix(lme(dflong$score~treat+time+treat*time,random =~1|id, data=dflong))
model.matrix(score~treat+time+treat*time,random =~1|id, data=dflong)
model.matrix(score~treat+time+treat*time,random =~score|id, data=dflong)
model.matrix(score~treat+time+treat*time,random =~treat|id, data=dflong)
model2<-lme(score~treat+time+treat*time,random =~1|id, data=dflong)
dummary(model2)
summary(model2)
X
dflong$id<-factor(dflong$id)
model2<-lme(score~treat+time+treat*time,random =~1|id, data=dflong)
X<-model.matrix(model2, dflong)
X
Z<-model.matrix(score~dflong-1,dflong)
Z<-model.matrix(score~id-1,dflong)
Z=Z[,order(colnames(Z))]
Z
Z%*%t(Z)
length(dflong$score)
14.14214^2*Z%*%t(Z) + 11.40175^2*diag(1, length(dflong$score))
sig<-14.14214^2*Z%*%t(Z) + 11.40175^2*diag(1, length(dflong$score))
print(sig, digits=3)
print(sig, digits=5)
sig<-14.14214^2*Z%*%t(Z) + 11.40175^2*diag(1, length(dflong$score))
sig
y<-dflong$score
solve(t(X)%*%sig%*%X)%*%t(X)%*%solve(sig)%*%y
summary(model2)
solve(t(X)%*%sig%*%X)%*%t(X)%*%solve(sig)%*%y
X
Z
solve(t(X)%*%sig%*%X)%*%t(X)%*%solve(sig)%*%y
BBeta<-solve(t(X)%*%sig%*%X)%*%t(X)%*%solve(sig)%*%y
14.14214^2*diag(1,10)%*%t(Z)%*%solve(sig)%*%(y-X%*%BBeta)
(b<-14.14214^2*diag(1,10)%*%t(Z)%*%solve(sig)%*%(y-X%*%BBeta))
(Y<-X%*%BBeta + Z%*%b)
y
BBeta<-solve(t(X)%*%solve(sig)%*%X)%*%t(X)%*%solve(sig)%*%y
BBeta
(b<-14.14214^2*diag(1,10)%*%t(Z)%*%solve(sig)%*%(y-X%*%BBeta))
(Y<-X%*%BBeta + Z%*%b)
source('D:/Uni/393Stat/Test2/RR.R', echo=TRUE)
(Y<-X%*%BBeta + Z%*%b)
y
dflong <-read.csv("Qmixed.csv", header=TRUE)
model2<-lme(score~treat+time+treat*time,random =~1|id, data=dflong)
X<-model.matrix(model2, dflong)
X
Z<-model.matrix(score~id-1,dflong)
Z=Z[,order(colnames(Z))]
Z
Z
Z<-model.matrix(score~id-1,dflong)
Z
dflong <-read.csv("Qmixed.csv", header=TRUE)
dflong
str(dflong)
dflong$id<-factor(dflong$id)
library(nlme)
model2<-lme(score~treat+time+treat*time,random =~1|id, data=dflong)
summary(model2)
lmeFit <-lme(CD4~obstime, random =~obstime|patient, data = aids, method = "REML")
X<-model.matrix(model2, dflong)
X
Z<-model.matrix(score~treat+time+treat*time, data=dflong)
Z<-model.matrix(score~id-1,dflong)
Z=Z[,order(colnames(Z))]
Z
length(dflong$score)
sig<-14.14214^2*Z%*%t(Z) + 11.40175^2*diag(1, length(dflong$score))
sig
print(sig, digits=5)
model.matrix(score~treat+time+treat*time,random =~treat|id, data=dflong)
Z
BBeta<-solve(t(X)%*%solve(sig)%*%X)%*%t(X)%*%solve(sig)%*%y
BBeta<-solve(t(X)%*%solve(sig)%*%X)%*%t(X)%*%sig%*%y
sig
y<-dflong$score
y
BBeta<-solve(t(X)%*%solve(sig)%*%X)%*%t(X)%*%solve(sig)%*%y
BBeta
BBeta<-solve(t(X)%*%solve(sig)%*%X)%*%t(X)%*%sig%*%y
BBeta
BBeta<-solve(t(X)%*%solve(sig)%*%X)%*%t(X)%*%solve(sig)%*%y
BBeta
(BBeta<-solve(t(X)%*%solve(sig)%*%X)%*%t(X)%*%solve(sig)%*%y)
(b<-14.14214^2*diag(1,10)%*%t(Z)%*%solve(sig)%*%(y-X%*%BBeta))
(Y<-X%*%BBeta + Z%*%b)
y
model2
anova(model2)
summary(model2)
